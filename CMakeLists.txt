cmake_minimum_required (VERSION 3.10)
project (ndarray)

include(GNUInstallDirs)
# include (ExternalProject)

option (NDARRAY_BUILD_TESTS "Build tests" OFF)

set (CMAKE_EXPORT_COMPILE_COMMANDS ON)
set (CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
set (EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
set (LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

# dependencies
function (ndarray_option name description default)
  set (NDARRAY_USE_${name} ${default} CACHE STRING "${description}")
  set_property (CACHE NDARRAY_USE_${name} PROPERTY STRINGS "TRUE;AUTO;FALSE")
endfunction ()

ndarray_option (ADIOS2 "Use ADIOS2" FALSE)
ndarray_option (CUDA "Use CUDA" FALSE) # experimental
ndarray_option (HDF5 "Use HDF5" FALSE)
ndarray_option (MPI "Use MPI" FALSE)
ndarray_option (NETCDF "Use NetCDF" FALSE)
ndarray_option (OpenMP "Use OpenMP" FALSE)
ndarray_option (PNETCDF "Use parallel-netcdf" FALSE)
ndarray_option (PNG "Use PNG" FALSE)
ndarray_option (VTK "Use VTK" FALSE)

set (CMAKE_CXX_STANDARD 17)
set (CMAKE_CXX_STANDARD_REQUIRED ON)

if (CMAKE_CXX_BYTE_ORDER STREQUAL LITTLE_ENDIAN)
  set (NDARRAY_USE_LITTLE_ENDIAN TRUE)
else ()
  set (NDARRAY_USE_BIG_ENDIAN TRUE)
endif ()

find_package (Threads REQUIRED)
find_package (yaml-cpp REQUIRED)

if (NDARRAY_USE_ADIOS2 STREQUAL AUTO)
  find_package (ADIOS2 QUIET)
elseif (NDARRAY_USE_ADIOS2)
  find_package (ADIOS2 REQUIRED)
endif ()
if (ADIOS2_FOUND)
  if (ADIOS2_HAVE_MPI)
    set (NDARRAY_USE_MPI ON)
  endif ()
  set (NDARRAY_HAVE_ADIOS2 ON)
  include_directories (${ADIOS2_INCLUDE_DIRS})
endif ()

if (NDARRAY_USE_VTK STREQUAL AUTO)
  find_package (VTK QUIET)
elseif (NDARRAY_USE_VTK)
  find_package (VTK REQUIRED)
endif ()
if (VTK_FOUND)
  set (NDARRAY_HAVE_VTK TRUE)
  if (VTK_MAJOR_VERSION STRLESS 9) # vtk8.9 does not require VTK_USE_FILE as well
    include (${VTK_USE_FILE})
  endif ()
endif ()

if (NDARRAY_USE_NETCDF STREQUAL AUTO)
  find_package (netCDF QUIET)
elseif (NDARRAY_USE_NETCDF)
  find_package (netCDF REQUIRED)
endif ()
if (netCDF_FOUND)
  set (NDARRAY_HAVE_NETCDF TRUE)
  if (netCDF_HAS_HDF5)
    set (NDARRAY_USE_HDF5 ON)
  endif ()
  if (netCDF_HAS_PARALLEL)
    set (NDARRAY_USE_MPI ON)
  endif ()
endif ()


if (NDARRAY_USE_MPI STREQUAL AUTO)
  find_package (MPI QUIET COMPONENTS MPICXX CXX)
elseif (NDARRAY_USE_MPI)
  find_package (MPI REQUIRED COMPONENTS MPICXX CXX)
endif ()
if (MPI_FOUND)
  set (NDARRAY_HAVE_MPI TRUE)
  set (CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
  include_directories (${MPI_C_INCLUDE_DIRS})
else ()
  set (NDARRAY_HAVE_MPI FALSE)
endif ()


if (NDARRAY_USE_HDF5 STREQUAL AUTO)
  find_package (HDF5 QUIET)
elseif (NDARRAY_USE_HDF5)
  find_package (HDF5 REQUIRED)
endif()
if (HDF5_FOUND)
  set (NDARRAY_HAVE_HDF5 TRUE)
  include_directories (${HDF5_INCLUDE_DIRS})
endif ()

if (NDARRAY_USE_PNETCDF STREQUAL AUTO)
  find_package (PNetCDF QUIET)
elseif (NDARRAY_USE_PNETCDF)
  find_package (PNetCDF REQUIRED)
endif()
if (PNETCDF_FOUND)
  set (NDARRAY_HAVE_PNETCDF TRUE)
  include_directories (${PNETCDF_INCLUDE_DIR})
endif ()

if (NDARRAY_USE_PNG STREQUAL AUTO)
  find_package (PNG QUIET)
elseif (NDARRAY_USE_PNG)
  find_package (PNG REQUIRED)
endif ()
if (PNG_FOUND)
  set (NDARRAY_HAVE_PNG TRUE)
  include_directories (${PNG_INCLUDE_DIRS})
endif ()

if (NDARRAY_USE_OpenMP STREQUAL AUTO)
  find_package (OpenMP QUIET)
elseif (NDARRAY_USE_OpenMP)
  find_package (OpenMP REQUIRED)
endif ()
if (OpenMP_CXX_FOUND)
  set (NDARRAY_HAVE_OPENMP TRUE)
endif ()

if (NDARRAY_USE_CUDA STREQUAL AUTO)
  enable_language (CUDA OPTIONAL) #FIXME: NDARRAY_HAVE_CUDA in AUTO mode
  find_package (CUDAToolkit OPTIONAL)
elseif (NDARRAY_USE_CUDA)
  enable_language (CUDA)
  find_package (CUDAToolkit)
  set (NDARRAY_HAVE_CUDA TRUE)
endif ()


### 

set (NDARRAY_INCLUDE_DIR 
  ${CMAKE_CURRENT_SOURCE_DIR}/include
  ${CMAKE_CURRENT_BINARY_DIR}/include
)
include_directories (${NDARRAY_INCLUDE_DIR})

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/include/ndarray/config.hh.in
  ${CMAKE_CURRENT_BINARY_DIR}/include/ndarray/config.hh)

install (DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/ndarray DESTINATION
  ${CMAKE_INSTALL_INCLUDEDIR})
install (FILES ${CMAKE_CURRENT_BINARY_DIR}/include/ndarray/config.hh
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ndarray)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/ndarrayConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/ndarrayConfig.cmake)

include (CMakePackageConfigHelpers)
set (NDARRAY_ROOT_DIR ${CMAKE_INSTALL_PREFIX})
set (NDARRAY_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include)
configure_package_config_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/ndarrayConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/ndarrayConfig.cmake
  PATH_VARS NDARRAY_INCLUDE_DIR 
  INSTALL_DESTINATION ${CMAKE_INSTALL_PREFIX}/cmake/ndarray
  NO_CHECK_REQUIRED_COMPONENTS_MACRO)
install (FILES ${CMAKE_CURRENT_BINARY_DIR}/ndarrayConfig.cmake
  DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/cmake/ndarray/)


add_subdirectory (src)

# If NDARRAY_BUILD_TESTS is on, enable testing.
if (NDARRAY_BUILD_TESTS)
  if (NDARRAY_HAVE_MPI)
    # set (TEST_EXECUTOR ${MPIEXEC_EXECUTABLE})
  endif()

  enable_testing ()
  include (Catch)
  add_subdirectory (tests)
endif ()


## summary
message ("")
message ("NDARRAY build configuration:")
message ("  NDARRAY Version:  ${NDARRAY_VERSION}")
message ("")
message ("  C++ compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} ${CMAKE_CXX_COMPILER_WRAPPER}")
message ("                ${CMAKE_CXX_COMPILER}")
message ("")
message ("  Installation prefix: ${CMAKE_INSTALL_PREFIX}")
message("        bin: ${CMAKE_INSTALL_BINDIR}")
message("        lib: ${CMAKE_INSTALL_LIBDIR}")
message("    include: ${CMAKE_INSTALL_INCLUDEDIR}")
message("      cmake: ${CMAKE_INSTALL_CMAKEDIR}")
message ("")
message("  Features:")
message("    Build Type:   ${CMAKE_BUILD_TYPE}")
message("    Executables:  ${NDARRAY_BUILD_EXECUTABLES}")
message("    Applications: ${NDARRAY_BUILD_APPLICATIONS}")
message("    Testing:      ${NDARRAY_BUILD_TESTS}")
message ("")
message("  Dependencies:")
message("    ADIOS2       ${NDARRAY_USE_ADIOS2} ${ADIOS2_FOUND}")
if (${NDARRAY_HAVE_ADIOS2})
  message("      Include path:    ${ADIOS2_INCLUDES}")
  message("      Libraries:       ${ADIOS2_LIBRARIES}")
endif ()
message("    Boost:       ${NDARRAY_USE_Boost} ${Boost_FOUND}")
if (${NDARRAY_HAVE_BOOST})
  message("      Version:         ${Boost_VERSION_STRING}")
  message("      Include path:    ${Boost_INCLUDE_DIR}")
  message("      Libraries:       ${Boost_LIBRARIES}")
endif ()
message("    CGAL:        ${NDARRAY_USE_CGAL} ${CGAL_FOUND}")
if (${NDARRAY_HAVE_CGAL})
  message("      CGAL path:       ${CUDA_VERSION}")
endif ()
message("    CUDA:        ${NDARRAY_USE_CUDA}")
if (${NDARRAY_HAVE_CUDA})
  message("      Host compiler:      ${CMAKE_CUDA_HOST_COMPILER}")
  message("      NVCC compiler:      ${CMAKE_CUDA_COMPILER}")
  message("      NVCC flags:         ${CMAKE_CUDA_FLAGS}")
  message("      Detected GPU count: ${DETECT_GPU_COUNT}")
endif()
message("    HDF5:        ${NDARRAY_USE_HDF5} ${HDF5_FOUND}")
if (${NDARRAY_HAVE_HDF5})
  message("      Version:           ${HDF5_VERSION}")
  message("      Include path:      ${HDF5_INCLUDE_DIRS}")
  message("      Definitions:       ${HDF5_DEFINITIONS}")
  message("      Libraries:         ${HDF5_LIBRARIES}")
endif ()
message("    MPI:         ${NDARRAY_USE_MPI} ${MPI_FOUND}")
if (${NDARRAY_HAVE_MPI})
  message("      MPI C++ compiler:  ${MPI_CXX_COMPILER}")
  message("      mpiexec:           ${MPIEXEC_EXECUTABLE}")
endif ()
message("    MPSolve:     ${NDARRAY_USE_MPSolve} ${MPSolve_FOUND}")
message("    netCDF:      ${NDARRAY_USE_NETCDF} ${NETCDF_FOUND}")
if (${NDARRAY_HAVE_NETCDF})
  message("      Version:         ${NetCDFVersion}")
  message("      Path:            ${netCDF_INSTALL_PREFIX}")
endif ()
message("    OpenMP*:     ${NDARRAY_USE_OpenMP} ${OpenMP_CXX_FOUND}")
if (${NDARRAY_HAVE_OPENMP})
  message("      Version:         ${OpenMP_CXX_VERSION}")
  message("      Flags:           ${OpenMP_CXX_FLAGS}")
  message("      Library:         ${OpenMP_CXX_LIBRARY}")
endif ()
message("    PNETCDF*:    ${NDARRAY_USE_PNETCDF} ${PNetCDF_FOUND}")
if (${NDARRAY_HAVE_PNETCDF})
  message("      Include path:   ${PNETCDF_INCLUDE_DIR}")
  message("      Library:        ${PNETCDF_LIBRARY}")
endif ()
message("    PNG:         ${NDARRAY_USE_PNG} ${PNG_FOUND}")
if (${NDARRAY_HAVE_PNG})
  message("      Library:   ${PNG_LIBRARY}")
endif()
message("    VTK:         ${NDARRAY_USE_VTK} ${NDARRAY_HAVE_VTK}")
if (${NDARRAY_HAVE_VTK})
  message("      VTK_DIR:     ${VTK_DIR}")
  message("      VTK_VERSION: ${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}")
endif ()
message ("")
message ("  (*) Experimental and not recommend to use")
message ("")
